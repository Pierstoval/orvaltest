/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Hello API Platform
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ApiImportsGetCollection200,
  ApiImportsGetCollectionParams,
  Import,
  ImportJsonld
} from './model'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



  export const getHelloAPIPlatform = () => {
/**
 * Retrieves the collection of Import resources.
 * @summary Retrieves the collection of Import resources.
 */
const apiImportsGetCollection = <TData = AxiosResponse<ApiImportsGetCollection200>>(
    params?: ApiImportsGetCollectionParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/imports`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Creates a Import resource.
 * @summary Creates a Import resource.
 */
const apiImportsPost = <TData = AxiosResponse<ImportJsonld>>(
    importJsonld: NonReadonly<ImportJsonld>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/imports`,
      importJsonld,options
    );
  }

/**
 * Retrieves a Import resource.
 * @summary Retrieves a Import resource.
 */
const apiImportsIdGet = <TData = AxiosResponse<ImportJsonld>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/imports/${id}`,options
    );
  }

/**
 * Replaces the Import resource.
 * @summary Replaces the Import resource.
 */
const apiImportsIdPut = <TData = AxiosResponse<ImportJsonld>>(
    id: string,
    importJsonld: NonReadonly<ImportJsonld>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/imports/${id}`,
      importJsonld,options
    );
  }

/**
 * Removes the Import resource.
 * @summary Removes the Import resource.
 */
const apiImportsIdDelete = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/imports/${id}`,options
    );
  }

/**
 * Updates the Import resource.
 * @summary Updates the Import resource.
 */
const apiImportsIdPatch = <TData = AxiosResponse<ImportJsonld>>(
    id: string,
    import: NonReadonly<Import>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/imports/${id}`,
      import,options
    );
  }

return {apiImportsGetCollection,apiImportsPost,apiImportsIdGet,apiImportsIdPut,apiImportsIdDelete,apiImportsIdPatch}};
export type ApiImportsGetCollectionResult = AxiosResponse<ApiImportsGetCollection200>
export type ApiImportsPostResult = AxiosResponse<ImportJsonld>
export type ApiImportsIdGetResult = AxiosResponse<ImportJsonld>
export type ApiImportsIdPutResult = AxiosResponse<ImportJsonld>
export type ApiImportsIdDeleteResult = AxiosResponse<void>
export type ApiImportsIdPatchResult = AxiosResponse<ImportJsonld>
